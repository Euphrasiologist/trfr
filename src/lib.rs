/*!
The `trfr` crate is purely for parsing the output of
the command line tool `Tandem Repeat Finder` (or `trf`).

The output is generated by passing the `-d` flag to create
a parseable table (rather than the standard HTML output). Please
see [here](https://github.com/Benson-Genomics-Lab/TRF) for the
source code and citation for `trf`.

The API follows that of most mainstream Rust API's (in particular
BurntSushi's). It is an iterator API currently and is unstable.

# Example

```no_run
use std::{error::Error, io, process};

fn example() -> Result<(), Box<dyn Error>> {
    // Build the trfr reader
    let mut rdr = trfr::Reader::from_reader(io::stdin());
    for result in rdr.records() {
        let record = result?;
        println!("{:?}", record);
    }
    Ok(())
}

fn main() {
    if let Err(err) = example() {
        println!("error running example: {}", err);
        process::exit(1);
    }
}
```

*/

mod error;
mod reader;
mod record;

pub use crate::{
    error::{Error, ErrorKind, Result},
    reader::{Flag, Reader, RecordsIntoIter, RecordsIter},
    record::Record,
};
